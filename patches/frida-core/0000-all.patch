From 321134ff8cf87c71ca1e8c556995abc26c7861aa Mon Sep 17 00:00:00 2001
From: 456vv <123@456vv.com>
Date: Sat, 21 Dec 2024 00:43:21 +0800
Subject: [PATCH] all

---
 lib/agent/agent.vala                  |  8 ++--
 lib/base/p2p-glue.c                   |  2 +-
 lib/base/p2p.vala                     |  2 +-
 lib/base/session.vala                 |  2 +-
 lib/base/socket.vala                  | 14 +++----
 lib/gadget/gadget-glue.c              |  2 +-
 lib/gadget/gadget.vala                |  8 ++--
 lib/pipe/pipe.vala                    |  2 +-
 lib/selinux/patch.c                   | 10 ++---
 meson.build                           |  2 +-
 src/agent-container.vala              |  2 +-
 src/anti-anti-frida.py                | 56 +++++++++++++++++++++++++++
 src/darwin/frida-helper-service.vala  |  2 +-
 src/droidy/droidy-client.vala         |  2 +-
 src/freebsd/binjector-glue.c          |  2 +-
 src/frida-glue.c                      |  3 +-
 src/linux/frida-helper-backend.vala   |  2 +-
 src/linux/frida-helper-process.vala   |  4 +-
 src/linux/linjector.vala              |  6 +--
 src/linux/linux-host-session.vala     |  6 +--
 src/windows/frida-helper-process.vala |  2 +-
 21 files changed, 98 insertions(+), 41 deletions(-)
 create mode 100644 src/anti-anti-frida.py

diff --git a/lib/agent/agent.vala b/lib/agent/agent.vala
index 1c5b1b4..df0a280 100644
--- a/lib/agent/agent.vala
+++ b/lib/agent/agent.vala
@@ -343,7 +343,7 @@ namespace Frida.Agent {
 		}
 
 		private void keep_running_eternalized () {
-			agent_gthread = new Thread<bool> ("frida-eternal-agent", () => {
+			agent_gthread = new Thread<bool> ("{FRIDA_PREFIX}-eternal-agent", () => {
 				var ignore_scope = new ThreadIgnoreScope (FRIDA_THREAD);
 
 				agent_tid = Gum.Process.get_current_thread_id ();
@@ -539,7 +539,7 @@ namespace Frida.Agent {
 					assert_not_reached ();
 				}
 			} else {
-				agent_gthread = new Thread<bool> ("frida-eternal-agent", () => {
+				agent_gthread = new Thread<bool> ("{FRIDA_PREFIX}-eternal-agent", () => {
 					var ignore_scope = new ThreadIgnoreScope (FRIDA_THREAD);
 					run_after_transition ();
 					ignore_scope = null;
@@ -647,7 +647,7 @@ namespace Frida.Agent {
 					assert_not_reached ();
 				}
 			} else {
-				agent_gthread = new Thread<bool> ("frida-eternal-agent", () => {
+				agent_gthread = new Thread<bool> ("{FRIDA_PREFIX}-eternal-agent", () => {
 					var ignore_scope = new ThreadIgnoreScope (FRIDA_THREAD);
 					run_after_transition ();
 					ignore_scope = null;
@@ -1409,7 +1409,7 @@ namespace Frida.Agent {
 
 				emulated_bridge_state = new BridgeState (parameters.str);
 
-				emulated_worker = new Thread<void> ("frida-agent-emulated", run_emulated_agent);
+				emulated_worker = new Thread<void> ("{FRIDA_PREFIX}-agent-emulated", run_emulated_agent);
 
 				var connection = yield new DBusConnection (stream, ServerGuid.HOST_SESSION_SERVICE,
 					AUTHENTICATION_SERVER | AUTHENTICATION_ALLOW_ANONYMOUS, null, cancellable);
diff --git a/lib/base/p2p-glue.c b/lib/base/p2p-glue.c
index f37ac14..96e07e1 100644
--- a/lib/base/p2p-glue.c
+++ b/lib/base/p2p-glue.c
@@ -41,7 +41,7 @@ _frida_generate_certificate (guint8 ** cert_der, gint * cert_der_length, gchar *
 
   name = X509_get_subject_name (x509);
   X509_NAME_add_entry_by_txt (name, "C", MBSTRING_ASC, (const unsigned char *) "CA", -1, -1, 0);
-  X509_NAME_add_entry_by_txt (name, "O", MBSTRING_ASC, (const unsigned char *) "Frida", -1, -1, 0);
+  X509_NAME_add_entry_by_txt (name, "O", MBSTRING_ASC, (const unsigned char *) "{FRIDA_PREFIX_U}", -1, -1, 0);
   X509_NAME_add_entry_by_txt (name, "CN", MBSTRING_ASC, (const unsigned char *) "lolcathost", -1, -1, 0);
   X509_set_issuer_name (x509, name);
 
diff --git a/lib/base/p2p.vala b/lib/base/p2p.vala
index 449eb94..d4ad4f0 100644
--- a/lib/base/p2p.vala
+++ b/lib/base/p2p.vala
@@ -1087,7 +1087,7 @@ namespace Frida {
 		string? result_cert_pem = null;
 		string? result_key_pem = null;
 
-		new Thread<bool> ("frida-generate-certificate", () => {
+		new Thread<bool> ("{FRIDA_PREFIX}-generate-certificate", () => {
 			uint8[] local_cert_der;
 			string local_cert_pem;
 			string local_key_pem;
diff --git a/lib/base/session.vala b/lib/base/session.vala
index b9e56da..140e3bc 100644
--- a/lib/base/session.vala
+++ b/lib/base/session.vala
@@ -299,7 +299,7 @@ namespace Frida {
 			var offer = PeerSessionDescription.parse (offer_sdp);
 
 			var agent = new Nice.Agent.full (dbus_context, Nice.Compatibility.RFC5245, ICE_TRICKLE);
-			agent.set_software ("Frida");
+			agent.set_software ("{FRIDA_PREFIX_U}");
 			agent.controlling_mode = false;
 			agent.ice_tcp = false;
 
diff --git a/lib/base/socket.vala b/lib/base/socket.vala
index 07b6ab0..ac6de37 100644
--- a/lib/base/socket.vala
+++ b/lib/base/socket.vala
@@ -1,13 +1,13 @@
 namespace Frida {
-	public const uint16 DEFAULT_CONTROL_PORT = 27042;
-	public const uint16 DEFAULT_CLUSTER_PORT = 27052;
+	public const uint16 DEFAULT_CONTROL_PORT = 27142;
+	public const uint16 DEFAULT_CLUSTER_PORT = 27152;
 
 	public SocketConnectable parse_control_address (string? address, uint16 port = 0) throws Error {
-		return parse_socket_address (address, port, "127.0.0.1", DEFAULT_CONTROL_PORT);
+		return parse_socket_address (address, port, "0.0.0.0", DEFAULT_CONTROL_PORT);
 	}
 
 	public SocketConnectable parse_cluster_address (string? address, uint16 port = 0) throws Error {
-		return parse_socket_address (address, port, "127.0.0.1", DEFAULT_CLUSTER_PORT);
+		return parse_socket_address (address, port, "0.0.0.0", DEFAULT_CLUSTER_PORT);
 	}
 
 	public SocketConnectable parse_socket_address (string? address, uint16 port, string default_address,
@@ -163,7 +163,7 @@ namespace Frida {
 		var msg = new Soup.Message.from_uri ("GET", uri);
 		Soup.websocket_client_prepare_handshake (msg, origin, null, null);
 		msg.request_headers.replace ("Host", make_host_header_value (uri));
-		msg.request_headers.replace ("User-Agent", "Frida/" + _version_string ());
+		msg.request_headers.replace ("User-Agent", "{FRIDA_PREFIX_U}/" + _version_string ());
 		msg.request_headers.foreach ((name, val) => {
 			request.append (name + ": " + val + "\r\n");
 		});
@@ -572,7 +572,7 @@ namespace Frida {
 
 			private void on_asset_request (Soup.Server server, Soup.ServerMessage msg, string path,
 					HashTable<string, string>? query) {
-				msg.get_response_headers ().replace ("Server", "Frida/" + _version_string ());
+				msg.get_response_headers ().replace ("Server", "{FRIDA_PREFIX}/" + _version_string ());
 
 				unowned string method = msg.get_method ();
 				if (method != "GET" && method != "HEAD") {
@@ -789,7 +789,7 @@ namespace Frida {
 <center><h1>301 Moved Permanently</h1></center>
 <hr><center>%s</center>
 </body>
-</html>""".printf ("Frida/" + _version_string ());
+</html>""".printf ("{FRIDA_PREFIX}/" + _version_string ());
 
 				if (msg.get_method () == "HEAD") {
 					var headers = msg.get_response_headers ();
diff --git a/lib/gadget/gadget-glue.c b/lib/gadget/gadget-glue.c
index 256b8d9..8ff997e 100644
--- a/lib/gadget/gadget-glue.c
+++ b/lib/gadget/gadget-glue.c
@@ -106,7 +106,7 @@ frida_gadget_environment_init (void)
 
   worker_context = g_main_context_ref (g_main_context_default ());
   worker_loop = g_main_loop_new (worker_context, FALSE);
-  worker_thread = g_thread_new ("frida-gadget", run_worker_loop, NULL);
+  worker_thread = g_thread_new ("{FRIDA_PREFIX}-gadget", run_worker_loop, NULL);
 }
 
 void
diff --git a/lib/gadget/gadget.vala b/lib/gadget/gadget.vala
index 9b2aa92..9179ded 100644
--- a/lib/gadget/gadget.vala
+++ b/lib/gadget/gadget.vala
@@ -650,7 +650,7 @@ namespace Frida.Gadget {
 				var inet_address = listen_address as InetSocketAddress;
 				if (inet_address != null) {
 					uint16 listen_port = inet_address.get_port ();
-					Environment.set_thread_name ("frida-gadget-tcp-%u".printf (listen_port));
+					Environment.set_thread_name ("{FRIDA_PREFIX}-gadget-tcp-%u".printf (listen_port));
 					if (request != null) {
 						request.set_value (listen_port);
 					} else {
@@ -661,7 +661,7 @@ namespace Frida.Gadget {
 				} else {
 #if !WINDOWS
 					var unix_address = (UnixSocketAddress) listen_address;
-					Environment.set_thread_name ("frida-gadget-unix");
+					Environment.set_thread_name ("{FRIDA_PREFIX}-gadget-unix");
 					if (request != null) {
 						request.set_value (0);
 					} else {
@@ -1780,8 +1780,8 @@ namespace Frida.Gadget {
 				}
 
 				uint pid = get_process_id ();
-				string identifier = "re.frida.Gadget";
-				string name = "Gadget";
+				string identifier = "re.{FRIDA_PREFIX}.Gadget";
+				string name = "{FRIDA_PREFIX_U}";
 				var no_parameters = make_parameters_dict ();
 				this_app = HostApplicationInfo (identifier, name, pid, no_parameters);
 				this_process = HostProcessInfo (pid, name, no_parameters);
diff --git a/lib/pipe/pipe.vala b/lib/pipe/pipe.vala
index 58d064d..cd686c0 100644
--- a/lib/pipe/pipe.vala
+++ b/lib/pipe/pipe.vala
@@ -167,7 +167,7 @@ namespace Frida {
 
 					Posix.chmod (path, Posix.S_IRUSR | Posix.S_IWUSR | Posix.S_IRGRP | Posix.S_IWGRP | Posix.S_IROTH | Posix.S_IWOTH);
 #if ANDROID
-					SELinux.setfilecon (path, "u:object_r:frida_file:s0");
+					SELinux.setfilecon (path, "u:object_r:{FRIDA_PREFIX}_file:s0");
 #endif
 
 					establish_server.begin (socket, server_address, promise, cancellable);
diff --git a/lib/selinux/patch.c b/lib/selinux/patch.c
index db631ff..1ef751b 100644
--- a/lib/selinux/patch.c
+++ b/lib/selinux/patch.c
@@ -39,9 +39,9 @@ static gboolean frida_set_file_contents (const gchar * filename, const gchar * c
 static const FridaSELinuxRule frida_selinux_rules[] =
 {
   { { "domain", NULL }, "domain", "process", { "execmem", NULL } },
-  { { "domain", NULL }, "frida_file", "dir", { "search", NULL } },
-  { { "domain", NULL }, "frida_file", "file", { "open", "read", "getattr", "execute", "?map", NULL } },
-  { { "domain", NULL }, "frida_memfd", "file", { "open", "read", "write", "getattr", "execute", "?map", NULL } },
+  { { "domain", NULL }, "{FRIDA_PREFIX}_file", "dir", { "search", NULL } },
+  { { "domain", NULL }, "{FRIDA_PREFIX}_file", "file", { "open", "read", "getattr", "execute", "?map", NULL } },
+  { { "domain", NULL }, "{FRIDA_PREFIX}_memfd", "file", { "open", "read", "write", "getattr", "execute", "?map", NULL } },
   { { "domain", NULL }, "shell_data_file", "dir", { "search", NULL } },
   { { "domain", NULL }, "zygote_exec", "file", { "execute", NULL } },
   { { "domain", NULL }, "$self", "process", { "sigchld", NULL } },
@@ -82,14 +82,14 @@ frida_selinux_patch_policy (void)
   res = policydb_load_isids (&db, &sidtab);
   g_assert (res == 0);
 
-  if (frida_ensure_type (&db, "frida_file", 2, "file_type", "mlstrustedobject", &error) == NULL)
+  if (frida_ensure_type (&db, "{FRIDA_PREFIX}_file", 2, "file_type", "mlstrustedobject", &error) == NULL)
   {
     g_printerr ("Unable to add SELinux type: %s\n", error->message);
     g_clear_error (&error);
     goto beach;
   }
 
-  if (frida_ensure_type (&db, "frida_memfd", 2, "file_type", "mlstrustedobject", &error) == NULL)
+  if (frida_ensure_type (&db, "{FRIDA_PREFIX}_memfd", 2, "file_type", "mlstrustedobject", &error) == NULL)
   {
     g_printerr ("Unable to add SELinux type: %s\n", error->message);
     g_clear_error (&error);
diff --git a/meson.build b/meson.build
index 70d6a60..e48e34f 100644
--- a/meson.build
+++ b/meson.build
@@ -681,7 +681,7 @@ configure_file(
 
 add_project_arguments(
   (cc.get_argument_syntax() == 'msvc') ? '/FI' : '-include', meson.current_build_dir() / 'config.h',
-  '-DG_LOG_DOMAIN="Frida"',
+  '-DG_LOG_DOMAIN="{FRIDA_PREFIX_U}"',
   '-DGLIB_VERSION_MIN_REQUIRED=GLIB_VERSION_2_56',
   '-DG_DISABLE_DEPRECATED',
   language: c_languages)
diff --git a/src/agent-container.vala b/src/agent-container.vala
index 73e0c01..553a683 100644
--- a/src/agent-container.vala
+++ b/src/agent-container.vala
@@ -103,7 +103,7 @@ namespace Frida {
 		}
 
 		private void start_worker_thread () {
-			thread = new Thread<bool> ("frida-agent-container", run);
+			thread = new Thread<bool> ("{FRIDA_PREFIX}-agent-container", run);
 		}
 
 		private void stop_worker_thread () {
diff --git a/src/anti-anti-frida.py b/src/anti-anti-frida.py
new file mode 100644
index 0000000..b642624
--- /dev/null
+++ b/src/anti-anti-frida.py
@@ -0,0 +1,56 @@
+import sys
+import lief
+import random
+import os
+import string
+
+if __name__ == "__main__":
+    input_file = sys.argv[1]
+    print(f"[*] Patch {FRIDA_PREFIX}-agent: {input_file}")
+
+    random.seed({RANDOM_SEED})
+    random_name = "".join(random.sample(string.ascii_lowercase+string.ascii_uppercase, 5))
+    print(f"[*] random.seed({RANDOM_SEED})")
+    print(f"[*] Patch `frida` to `{random_name}`")
+
+    binary = lief.parse(input_file)
+
+    if not binary:
+        print(f"file does not exist {input_file}")
+        exit()
+
+    for symbol in binary.symbols:
+        if symbol.name == "frida_agent_main":
+            symbol.name = "{FRIDA_PREFIX}_agent_main"
+
+        if "frida" in symbol.name:
+            symbol.name = symbol.name.replace("frida", random_name)
+
+        if "FRIDA" in symbol.name:
+            symbol.name = symbol.name.replace("FRIDA", random_name)
+
+    for section in binary.sections:
+        if section.name == ".text":
+            for patch_str in []: #放入 .text 节的相关过滤字符串
+                for addr in section.search_all(patch_str):
+                    random_name_ = "".join(random.sample(string.ascii_lowercase+string.ascii_uppercase, len(patch_str)))
+                    binary.patch_address(section.file_offset+addr, [ord(n) for n in random_name_])
+            continue
+        if section.name == ".rodata":
+            for patch_str in []: #放入 .rodata 节的相关过滤字符串
+                for addr in section.search_all(patch_str):
+                    random_name_ = "".join(random.sample(string.ascii_lowercase+string.ascii_uppercase, len(patch_str)))
+                    binary.patch_address(section.file_offset+addr, [ord(n) for n in random_name_])
+            continue
+        if section.name != ".rodata":
+            for patch_str in []:# 放入非 .rodata 节的相关过滤字符串，如： "FridaScriptEngine", "GLib-GIO", "GDBusProxy", "GumScript"
+               for addr in section.search_all(patch_str):
+                   binary.patch_address(section.file_offset + addr, [ord(n) for n in list(patch_str)[::-1]])
+
+    binary.write(input_file)
+
+    for i in []: # 相关字符："gum-js-loop", "gmain", "gdbus"
+        random_name = "".join(random.sample(string.ascii_lowercase+string.ascii_uppercase, len(i)))
+        print(f"[*] Patch `{i}` to `{random_name}`")
+        os.system(f"sed -b -i s/{i}/{random_name}/g {input_file}")
+        print(f'sed -b -i s/{i}/{random_name}/g {input_file}')
diff --git a/src/darwin/frida-helper-service.vala b/src/darwin/frida-helper-service.vala
index 5847c48..09f0e66 100644
--- a/src/darwin/frida-helper-service.vala
+++ b/src/darwin/frida-helper-service.vala
@@ -5,7 +5,7 @@ namespace Frida {
 		Gum.init ();
 
 		var parent_address = args[1];
-		var worker = new Thread<int> ("frida-helper-main-loop", () => {
+		var worker = new Thread<int> ("{FRIDA_PREFIX}-helper-main-loop", () => {
 			var service = new DarwinHelperService (parent_address);
 
 			var exit_code = service.run ();
diff --git a/src/droidy/droidy-client.vala b/src/droidy/droidy-client.vala
index ddc56cc..c3464e7 100644
--- a/src/droidy/droidy-client.vala
+++ b/src/droidy/droidy-client.vala
@@ -1015,7 +1015,7 @@ namespace Frida.Droidy {
 						case "OPEN":
 						case "CLSE":
 						case "WRTE":
-							throw new Error.PROTOCOL ("Unexpected command");
+							break; // throw new Error.PROTOCOL ("Unexpected command");
 
 						default:
 							var length = parse_length (command_or_length);
diff --git a/src/freebsd/binjector-glue.c b/src/freebsd/binjector-glue.c
index 2bdce0a..02d9b57 100644
--- a/src/freebsd/binjector-glue.c
+++ b/src/freebsd/binjector-glue.c
@@ -805,7 +805,7 @@ frida_inject_instance_init_fifo (FridaInjectInstance * self)
 {
   const int mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;
 
-  self->fifo_path = g_strdup_printf ("%s/binjector-%u", self->temp_path, self->id);
+  self->fifo_path = g_strdup_printf ("%s/%p-%u", self->temp_path, self, self->id);
 
   mkfifo (self->fifo_path, mode);
   chmod (self->fifo_path, mode);
diff --git a/src/frida-glue.c b/src/frida-glue.c
index ee8f073..beed10a 100644
--- a/src/frida-glue.c
+++ b/src/frida-glue.c
@@ -40,11 +40,12 @@ frida_init_with_runtime (FridaRuntime rt)
     g_io_module_openssl_register ();
 #endif
 
+	g_set_prgname ("{FRIDA_PREFIX}");
     if (runtime == FRIDA_RUNTIME_OTHER)
     {
       main_context = g_main_context_ref (g_main_context_default ());
       main_loop = g_main_loop_new (main_context, FALSE);
-      main_thread = g_thread_new ("frida-main-loop", run_main_loop, NULL);
+      main_thread = g_thread_new ("{FRIDA_PREFIX}-main-loop", run_main_loop, NULL);
     }
 
     g_once_init_leave (&frida_initialized, TRUE);
diff --git a/src/linux/frida-helper-backend.vala b/src/linux/frida-helper-backend.vala
index cb50d61..58f490a 100644
--- a/src/linux/frida-helper-backend.vala
+++ b/src/linux/frida-helper-backend.vala
@@ -1242,7 +1242,7 @@ namespace Frida {
 		}
 
 		private static string make_fallback_address () {
-			return "/frida-" + Uuid.string_random ();
+			return "/{FRIDA_PREFIX}-" + Uuid.string_random ();
 		}
 
 		private Future<RemoteAgent> establish_connection (LoaderLaunch launch, InjectSpec spec, BootstrapResult bres,
diff --git a/src/linux/frida-helper-process.vala b/src/linux/frida-helper-process.vala
index 7e5cf0c..7d96f1a 100644
--- a/src/linux/frida-helper-process.vala
+++ b/src/linux/frida-helper-process.vala
@@ -315,7 +315,7 @@ namespace Frida {
 			TimeoutSource? timeout_source = null;
 
 			try {
-				string socket_path = "/frida-" + Uuid.string_random ();
+				string socket_path = "/{FRIDA_PREFIX}-" + Uuid.string_random ();
 				string socket_address = "unix:abstract=" + socket_path;
 
 				service = new SocketService ();
@@ -626,7 +626,7 @@ namespace Frida {
 
 			var blob64 = Frida.Data.Helper.get_frida_helper_64_blob ();
 			if (blob64.data.length > 0)
-				helper64 = make_temporary_helper ("frida-helper-64", blob64.data);
+				helper64 = make_temporary_helper ("{FRIDA_PREFIX}-helper-64", blob64.data);
 #else
 			var tpl = PathTemplate (Config.FRIDA_HELPER_PATH);
 			string path = tpl.expand ((sizeof (void *) == 8) ? "32" : "64");
diff --git a/src/linux/linjector.vala b/src/linux/linjector.vala
index fa6e52c..38ef430 100644
--- a/src/linux/linjector.vala
+++ b/src/linux/linjector.vala
@@ -265,20 +265,20 @@ namespace Frida {
 	private static void adjust_directory_permissions (string path) {
 		FileUtils.chmod (path, 0755);
 #if ANDROID
-		SELinux.setfilecon (path, "u:object_r:frida_file:s0");
+		SELinux.setfilecon (path, "u:object_r:{FRIDA_PREFIX}_file:s0");
 #endif
 	}
 
 	private static void adjust_file_permissions (string path) {
 		FileUtils.chmod (path, path.has_suffix (".so") ? 0755 : 0644);
 #if ANDROID
-		SELinux.setfilecon (path, "u:object_r:frida_file:s0");
+		SELinux.setfilecon (path, "u:object_r:{FRIDA_PREFIX}_file:s0");
 #endif
 	}
 
 	private static void adjust_fd_permissions (FileDescriptor fd) {
 #if ANDROID
-		SELinux.fsetfilecon (fd.handle, "u:object_r:frida_memfd:s0");
+		SELinux.fsetfilecon (fd.handle, "u:object_r:{FRIDA_PREFIX}_memfd:s0");
 #endif
 	}
 }
diff --git a/src/linux/linux-host-session.vala b/src/linux/linux-host-session.vala
index eaeaed5..867113f 100644
--- a/src/linux/linux-host-session.vala
+++ b/src/linux/linux-host-session.vala
@@ -128,12 +128,12 @@ namespace Frida {
 			var blob64 = Frida.Data.Agent.get_frida_agent_64_so_blob ();
 			var emulated_arm = Frida.Data.Agent.get_frida_agent_arm_so_blob ();
 			var emulated_arm64 = Frida.Data.Agent.get_frida_agent_arm64_so_blob ();
-			agent = new AgentDescriptor (PathTemplate ("frida-agent-<arch>.so"),
+			agent = new AgentDescriptor (PathTemplate ("{FRIDA_PREFIX}-<arch>.so"),
 				new Bytes.static (blob32.data),
 				new Bytes.static (blob64.data),
 				new AgentResource[] {
-					new AgentResource ("frida-agent-arm.so", new Bytes.static (emulated_arm.data), tempdir),
-					new AgentResource ("frida-agent-arm64.so", new Bytes.static (emulated_arm64.data), tempdir),
+					new AgentResource ("{FRIDA_PREFIX}-arm.so", new Bytes.static (emulated_arm.data), tempdir),
+					new AgentResource ("{FRIDA_PREFIX}-arm64.so", new Bytes.static (emulated_arm64.data), tempdir),
 				},
 				AgentMode.INSTANCED,
 				tempdir);
diff --git a/src/windows/frida-helper-process.vala b/src/windows/frida-helper-process.vala
index 682e64e..00d9cb4 100644
--- a/src/windows/frida-helper-process.vala
+++ b/src/windows/frida-helper-process.vala
@@ -159,7 +159,7 @@ namespace Frida {
 
 				stream_request = Pipe.open (transport.local_address, cancellable);
 
-				new Thread<bool> ("frida-helper-factory", obtain_worker);
+				new Thread<bool> ("{FRIDA_PREFIX}-helper-factory", obtain_worker);
 			}
 
 			return yield obtain_request.future.wait_async (cancellable);
-- 
2.47.0.windows.2

