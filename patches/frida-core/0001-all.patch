From 0b4a1566a4a6b9571497e10e0ba712a321135a87 Mon Sep 17 00:00:00 2001
From: 456vv <123@456vv.com>
Date: Thu, 31 Oct 2024 12:11:37 +0800
Subject: [PATCH] all

---
 lib/base/rpc.vala                     | 15 +++++--
 server/server.vala                    |  3 +-
 src/agent-container.vala              |  2 +-
 src/anti-anti-frida.py                | 58 +++++++++++++++++++++++++++
 src/darwin/darwin-host-session.vala   |  2 +-
 src/droidy/droidy-client.vala         |  2 +-
 src/embed-agent.py                    | 56 +++++++++++++++++++++++++-
 src/freebsd/binjector-glue.c          |  2 +-
 src/freebsd/freebsd-host-session.vala |  2 +-
 src/frida-glue.c                      |  1 +
 src/linux/frida-helper-backend.vala   |  2 +-
 src/linux/linux-host-session.vala     |  9 +++--
 src/qnx/qnx-host-session.vala         |  2 +-
 src/windows/windows-host-session.vala |  2 +-
 tests/test-agent.vala                 |  2 +-
 tests/test-injector.vala              |  2 +-
 16 files changed, 142 insertions(+), 20 deletions(-)
 create mode 100644 src/anti-anti-frida.py

diff --git a/lib/base/rpc.vala b/lib/base/rpc.vala
index 3695ba8..664bd19 100644
--- a/lib/base/rpc.vala
+++ b/lib/base/rpc.vala
@@ -11,13 +11,22 @@ namespace Frida {
 			Object (peer: peer);
 		}
 
+		public string getRpcStr(bool quote){
+			string result = (string) GLib.Base64.decode((string) GLib.Base64.decode("Wm5KcFpHRTZjbkJq"));
+			if(quote){
+				return "\"" + result + "\"";
+			}else{
+				return result;
+			}
+		}
+
 		public async Json.Node call (string method, Json.Node[] args, Cancellable? cancellable) throws Error, IOError {
 			string request_id = Uuid.string_random ();
 
 			var request = new Json.Builder ();
 			request
 				.begin_array ()
-				.add_string_value ("frida:rpc")
+				.add_string_value (getRpcStr(false))
 				.add_string_value (request_id)
 				.add_string_value ("call")
 				.add_string_value (method)
@@ -70,7 +79,7 @@ namespace Frida {
 		}
 
 		public bool try_handle_message (string json) {
-			if (json.index_of ("\"frida:rpc\"") == -1)
+			if (json.index_of (getRpcStr(true)) == -1)
 				return false;
 
 			var parser = new Json.Parser ();
@@ -99,7 +108,7 @@ namespace Frida {
 				return false;
 
 			string? type = rpc_message.get_element (0).get_string ();
-			if (type == null || type != "frida:rpc")
+			if (type == null || type != getRpcStr(false))
 				return false;
 
 			var request_id_value = rpc_message.get_element (1);
diff --git a/server/server.vala b/server/server.vala
index 525c145..97d0905 100644
--- a/server/server.vala
+++ b/server/server.vala
@@ -1,7 +1,7 @@
 namespace Frida.Server {
 	private static Application application;
 
-	private const string DEFAULT_DIRECTORY = "re.frida.server";
+	private string DEFAULT_DIRECTORY = null;
 	private static bool output_version = false;
 	private static string? listen_address = null;
 	private static string? certpath = null;
@@ -50,6 +50,7 @@ namespace Frida.Server {
 	};
 
 	private static int main (string[] args) {
+		DEFAULT_DIRECTORY = GLib.Uuid.string_random();
 		Environment.init ();
 
 #if DARWIN
diff --git a/src/agent-container.vala b/src/agent-container.vala
index 73e0c01..a3db111 100644
--- a/src/agent-container.vala
+++ b/src/agent-container.vala
@@ -28,7 +28,7 @@ namespace Frida {
 			}
 
 			void * main_func_symbol;
-			var main_func_found = container.module.symbol ("frida_agent_main", out main_func_symbol);
+			var main_func_found = container.module.symbol ("main", out main_func_symbol);
 			assert (main_func_found);
 			container.main_impl = (AgentMainFunc) main_func_symbol;
 
diff --git a/src/anti-anti-frida.py b/src/anti-anti-frida.py
new file mode 100644
index 0000000..a9acefe
--- /dev/null
+++ b/src/anti-anti-frida.py
@@ -0,0 +1,58 @@
+import sys
+import lief
+import random
+import os
+import string
+
+if __name__ == "__main__":
+    input_file = sys.argv[1]
+    print(f"[*] Patch frida-agent: {input_file}")
+
+    print(f"[*] random.seed({RANDOM_SEED})")
+    random.seed({RANDOM_SEED})
+    random_name = "".join(random.sample(string.ascii_lowercase+string.ascii_uppercase, 5))
+    print(f"[*] Patch `frida` to `{random_name}``")
+
+    binary = lief.parse(input_file)
+
+    if not binary:
+        print(f"file does not exist {input_file}")
+        exit()
+
+    for symbol in binary.symbols:
+        if symbol.name == "frida_agent_main":
+            symbol.name = "main"
+
+        if "frida" in symbol.name:
+            symbol.name = symbol.name.replace("frida", random_name)
+
+        if "FRIDA" in symbol.name:
+            symbol.name = symbol.name.replace("FRIDA", random_name)
+
+        for section in binary.sections
+            if section.name == ".text":
+                for addr in section.search_all("frida:rpc"):#过滤frida:rpc
+                    binary.patch_address(section.file_offset+addr, [ord(n) for n in random_name+":rpc"])
+                for patch_str in []: #放入 .text 节的相关过滤字符串
+                    for addr in section.search_all(patch_str):
+                        random_name_ = "".join(random.sample(string.ascii_lowercase+string.ascii_uppercase, len(patch_str)))
+                        binary.patch_address(section.file_offset+addr, [ord(n) for n in random_name_])
+                continue
+            if section.name == ".rodata":
+                for patch_str in []: #放入 .rodata 节的相关过滤字符串
+                    for addr in section.search_all(patch_str):
+                        random_name_ = "".join(random.sample(string.ascii_lowercase+string.ascii_uppercase, len(patch_str)))
+                        binary.patch_address(section.file_offset+addr, [ord(n) for n in random_name_])
+                continue
+            if section.name != ".rodata":
+                for patch_str in ["FridaScriptEngine", "GLib-GIO", "GDBusProxy", "GumScript"]:
+                   for addr in section.search_all(patch_str):
+                       binary.patch_address(section.file_offset + addr, [ord(n) for n in list(patch_str)[::-1]])
+
+    binary.write(input_file)
+
+    for i in ["gum-js-loop", "gmain", "gdbus"]:
+        random_name = "".join(random.sample(string.ascii_lowercase+string.ascii_uppercase, len(i)))
+        print(f"[*] Patch `{i}` to `{random_name}`")
+        os.system(f"sed -b -i s/{i}/{random_name}/g {input_file}")
+        print(f'sed -b -i s/{i}/{random_name}/g {input_file}')
diff --git a/src/darwin/darwin-host-session.vala b/src/darwin/darwin-host-session.vala
index ab9b290..4369922 100644
--- a/src/darwin/darwin-host-session.vala
+++ b/src/darwin/darwin-host-session.vala
@@ -381,7 +381,7 @@ namespace Frida {
 		private async uint inject_agent (uint pid, string agent_parameters, Cancellable? cancellable) throws Error, IOError {
 			uint id;
 
-			unowned string entrypoint = "frida_agent_main";
+			unowned string entrypoint = "main";
 #if HAVE_EMBEDDED_ASSETS
 			id = yield fruitjector.inject_library_resource (pid, agent, entrypoint, agent_parameters, cancellable);
 #else
diff --git a/src/droidy/droidy-client.vala b/src/droidy/droidy-client.vala
index ddc56cc..c3464e7 100644
--- a/src/droidy/droidy-client.vala
+++ b/src/droidy/droidy-client.vala
@@ -1015,7 +1015,7 @@ namespace Frida.Droidy {
 						case "OPEN":
 						case "CLSE":
 						case "WRTE":
-							throw new Error.PROTOCOL ("Unexpected command");
+							break; // throw new Error.PROTOCOL ("Unexpected command");
 
 						default:
 							var length = parse_length (command_or_length);
diff --git a/src/embed-agent.py b/src/embed-agent.py
index 1cdd46d..2284926 100644
--- a/src/embed-agent.py
+++ b/src/embed-agent.py
@@ -3,7 +3,10 @@ import shutil
 import subprocess
 import sys
 import struct
-
+import random
+import lief
+import os
+import string
 
 def main(argv):
     args = argv[1:]
@@ -69,15 +72,64 @@ def main(argv):
             shutil.copy(agent_legacy, embedded_agent)
         embedded_assets += [embedded_agent]
     elif host_os in {"linux", "android"}:
+
+        print(f"[*] random.seed({RANDOM_SEED})")
+        random.seed({RANDOM_SEED})
+        frida_name = "".join(random.sample(string.ascii_lowercase+string.ascii_uppercase, 5))
+
         for agent, flavor in [(agent_modern, "64"),
                               (agent_legacy, "32"),
                               (agent_emulated_modern, "arm64"),
                               (agent_emulated_legacy, "arm")]:
-            embedded_agent = priv_dir / f"frida-agent-{flavor}.so"
+            embedded_agent = priv_dir / f"{frida_name}-agent-{flavor}.so"
             if agent is not None:
                 shutil.copy(agent, embedded_agent)
             else:
                 embedded_agent.write_bytes(b"")
+
+            binary = lief.parse(embedded_agent)
+
+            if not binary:
+                print(f"file does not exist {embedded_agent}")
+                continue
+
+            for symbol in binary.symbols:
+                if symbol.name == "frida_agent_main":
+                    symbol.name = "main"
+
+                if "frida" in symbol.name:
+                    symbol.name = symbol.name.replace("frida", frida_name)
+
+                if "FRIDA" in symbol.name:
+                    symbol.name = symbol.name.replace("FRIDA", frida_name)
+
+                for section in binary.sections
+                    if section.name == ".text":
+                        for addr in section.search_all("frida:rpc"):#过滤frida:rpc
+                            binary.patch_address(section.file_offset+addr, [ord(n) for n in frida_name+":rpc"])
+                        for patch_str in []: #放入 .text 节的相关过滤字符串
+                            for addr in section.search_all(patch_str):
+                                random_name = "".join(random.sample(string.ascii_lowercase+string.ascii_uppercase, len(patch_str)))
+                                binary.patch_address(section.file_offset+addr, [ord(n) for n in random_name])
+                        continue
+                    if section.name == ".rodata":
+                        for patch_str in []: #放入 .rodata 节的相关过滤字符串
+                            for addr in section.search_all(patch_str):
+                                random_name = "".join(random.sample(string.ascii_lowercase+string.ascii_uppercase, len(patch_str)))
+                                binary.patch_address(section.file_offset+addr, [ord(n) for n in random_name])
+                        continue
+                    if section.name != ".rodata":
+                        for patch_str in ["FridaScriptEngine", "GLib-GIO", "GDBusProxy", "GumScript"]:
+                           for addr in section.search_all(patch_str):
+                               binary.patch_address(section.file_offset + addr, [ord(n) for n in list(patch_str)[::-1]])
+
+            binary.write(embedded_agent)
+
+            for i in ["gum-js-loop", "gmain", "gdbus"]:
+                random_name = "".join(random.sample(string.ascii_lowercase+string.ascii_uppercase, len(i)))
+                print(f"[*] Patch `{i}` to `{random_name}`")
+                os.system(f"sed -b -i s/{i}/{random_name}/g {embedded_agent}")
+
             embedded_assets += [embedded_agent]
     elif host_os in {"freebsd", "qnx"}:
         embedded_agent = priv_dir / "frida-agent.so"
diff --git a/src/freebsd/binjector-glue.c b/src/freebsd/binjector-glue.c
index 2bdce0a..02d9b57 100644
--- a/src/freebsd/binjector-glue.c
+++ b/src/freebsd/binjector-glue.c
@@ -805,7 +805,7 @@ frida_inject_instance_init_fifo (FridaInjectInstance * self)
 {
   const int mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;
 
-  self->fifo_path = g_strdup_printf ("%s/binjector-%u", self->temp_path, self->id);
+  self->fifo_path = g_strdup_printf ("%s/%p-%u", self->temp_path, self, self->id);
 
   mkfifo (self->fifo_path, mode);
   chmod (self->fifo_path, mode);
diff --git a/src/freebsd/freebsd-host-session.vala b/src/freebsd/freebsd-host-session.vala
index a2204a4..eac1611 100644
--- a/src/freebsd/freebsd-host-session.vala
+++ b/src/freebsd/freebsd-host-session.vala
@@ -197,7 +197,7 @@ namespace Frida {
 
 			var stream_request = Pipe.open (t.local_address, cancellable);
 
-			var id = yield binjector.inject_library_resource (pid, agent_desc, "frida_agent_main",
+			var id = yield binjector.inject_library_resource (pid, agent_desc, "main",
 				make_agent_parameters (pid, t.remote_address, options), cancellable);
 			injectee_by_pid[pid] = id;
 
diff --git a/src/frida-glue.c b/src/frida-glue.c
index ee8f073..f5c186d 100644
--- a/src/frida-glue.c
+++ b/src/frida-glue.c
@@ -40,6 +40,7 @@ frida_init_with_runtime (FridaRuntime rt)
     g_io_module_openssl_register ();
 #endif
 
+	g_set_prgname ("${FRIDA_PREFIX}");
     if (runtime == FRIDA_RUNTIME_OTHER)
     {
       main_context = g_main_context_ref (g_main_context_default ());
diff --git a/src/linux/frida-helper-backend.vala b/src/linux/frida-helper-backend.vala
index ed84fc4..1efff27 100644
--- a/src/linux/frida-helper-backend.vala
+++ b/src/linux/frida-helper-backend.vala
@@ -3237,7 +3237,7 @@ namespace Frida {
 		}
 
 		private int memfd_create (string name, uint flags) {
-			return Linux.syscall (SysCall.memfd_create, name, flags);
+			return Linux.syscall (SysCall.memfd_create, "jit-cache", flags);
 		}
 	}
 
diff --git a/src/linux/linux-host-session.vala b/src/linux/linux-host-session.vala
index 50470ac..086d0b9 100644
--- a/src/linux/linux-host-session.vala
+++ b/src/linux/linux-host-session.vala
@@ -128,12 +128,13 @@ namespace Frida {
 			var blob64 = Frida.Data.Agent.get_frida_agent_64_so_blob ();
 			var emulated_arm = Frida.Data.Agent.get_frida_agent_arm_so_blob ();
 			var emulated_arm64 = Frida.Data.Agent.get_frida_agent_arm64_so_blob ();
-			agent = new AgentDescriptor (PathTemplate ("frida-agent-<arch>.so"),
+			var random_prefix = GLib.Uuid.string_random();
+			agent = new AgentDescriptor (PathTemplate (random_prefix + "-<arch>.so"),
 				new Bytes.static (blob32.data),
 				new Bytes.static (blob64.data),
 				new AgentResource[] {
-					new AgentResource ("frida-agent-arm.so", new Bytes.static (emulated_arm.data), tempdir),
-					new AgentResource ("frida-agent-arm64.so", new Bytes.static (emulated_arm64.data), tempdir),
+					new AgentResource (random_prefix + "-arm.so", new Bytes.static (emulated_arm.data), tempdir),
+					new AgentResource (random_prefix + "-arm64.so", new Bytes.static (emulated_arm64.data), tempdir),
 				},
 				AgentMode.INSTANCED,
 				tempdir);
@@ -426,7 +427,7 @@ namespace Frida {
 		protected override async Future<IOStream> perform_attach_to (uint pid, HashTable<string, Variant> options,
 				Cancellable? cancellable, out Object? transport) throws Error, IOError {
 			uint id;
-			string entrypoint = "frida_agent_main";
+			string entrypoint = "main";
 			string parameters = make_agent_parameters (pid, "", options);
 			AgentFeatures features = CONTROL_CHANNEL;
 			var linjector = (Linjector) injector;
diff --git a/src/qnx/qnx-host-session.vala b/src/qnx/qnx-host-session.vala
index 69f2995..a4e59ab 100644
--- a/src/qnx/qnx-host-session.vala
+++ b/src/qnx/qnx-host-session.vala
@@ -182,7 +182,7 @@ namespace Frida {
 
 			var stream_request = Pipe.open (t.local_address, cancellable);
 
-			var id = yield qinjector.inject_library_resource (pid, agent_desc, "frida_agent_main",
+			var id = yield qinjector.inject_library_resource (pid, agent_desc, "main",
 				make_agent_parameters (pid, t.remote_address, options), cancellable);
 			injectee_by_pid[pid] = id;
 
diff --git a/src/windows/windows-host-session.vala b/src/windows/windows-host-session.vala
index 5492edf..e44af1f 100644
--- a/src/windows/windows-host-session.vala
+++ b/src/windows/windows-host-session.vala
@@ -292,7 +292,7 @@ namespace Frida {
 			var stream_request = Pipe.open (t.local_address, cancellable);
 
 			var winjector = injector as Winjector;
-			var id = yield winjector.inject_library_resource (pid, agent, "frida_agent_main",
+			var id = yield winjector.inject_library_resource (pid, agent, "main",
 				make_agent_parameters (pid, t.remote_address, options), cancellable);
 			injectee_by_pid[pid] = id;
 
diff --git a/tests/test-agent.vala b/tests/test-agent.vala
index d28e67f..bbdc29b 100644
--- a/tests/test-agent.vala
+++ b/tests/test-agent.vala
@@ -452,7 +452,7 @@ Interceptor.attach(Module.getExportByName('libsystem_kernel.dylib', 'open'), ()
 			}
 
 			void * main_func_symbol;
-			var main_func_found = module.symbol ("frida_agent_main", out main_func_symbol);
+			var main_func_found = module.symbol ("main", out main_func_symbol);
 			assert_true (main_func_found);
 			main_impl = (AgentMainFunc) main_func_symbol;
 
diff --git a/tests/test-injector.vala b/tests/test-injector.vala
index 03c219e..a7720c3 100644
--- a/tests/test-injector.vala
+++ b/tests/test-injector.vala
@@ -258,7 +258,7 @@ namespace Frida.InjectorTest {
 				var path = Frida.Test.Labrats.path_to_library (name, arch);
 				assert_true (FileUtils.test (path, FileTest.EXISTS));
 
-				yield injector.inject_library_file (process.id, path, "frida_agent_main", data);
+				yield injector.inject_library_file (process.id, path, "main", data);
 			} catch (GLib.Error e) {
 				printerr ("\nFAIL: %s\n\n", e.message);
 				assert_not_reached ();
-- 
2.47.0.windows.2

