From 1ce6d840576aadea83c59f04a1fa301ed8adc63b Mon Sep 17 00:00:00 2001
From: 456vv <123@456vv.com>
Date: Mon, 25 Nov 2024 15:34:26 +0800
Subject: [PATCH] all

---
 bindings/gumjs/gumscriptscheduler.c          |  2 +-
 bindings/gumjs/runtime/message-dispatcher.js |  8 ++--
 bindings/gumjs/runtime/worker.js             |  4 +-
 gum/backend-posix/gummemory-posix.c          | 42 +++++---------------
 gum/gum.c                                    |  2 +-
 5 files changed, 17 insertions(+), 41 deletions(-)

diff --git a/bindings/gumjs/gumscriptscheduler.c b/bindings/gumjs/gumscriptscheduler.c
index b86a6c5..cc8c726 100644
--- a/bindings/gumjs/gumscriptscheduler.c
+++ b/bindings/gumjs/gumscriptscheduler.c
@@ -114,7 +114,7 @@ gum_script_scheduler_start (GumScriptScheduler * self)
   {
     self->js_loop = g_main_loop_new (self->js_context, TRUE);
 
-    self->js_thread = g_thread_new ("gum-js-loop",
+    self->js_thread = g_thread_new ("{FRIDA_PREFIX}-js-loop",
         (GThreadFunc) gum_script_scheduler_run_js_loop, self);
   }
 }
diff --git a/bindings/gumjs/runtime/message-dispatcher.js b/bindings/gumjs/runtime/message-dispatcher.js
index e6dcaba..9cd8351 100644
--- a/bindings/gumjs/runtime/message-dispatcher.js
+++ b/bindings/gumjs/runtime/message-dispatcher.js
@@ -25,7 +25,7 @@ function MessageDispatcher() {
 
   function handleMessage(rawMessage, data) {
     const message = JSON.parse(rawMessage);
-    if (message instanceof Array && message[0] === 'frida:rpc') {
+    if (message instanceof Array && message[0] === '{FRIDA_PREFIX}:rpc') {
       handleRpcMessage(message[1], message[2], message.slice(3), data);
     } else {
       messages.push([message, data]);
@@ -70,11 +70,11 @@ function MessageDispatcher() {
   function reply(id, type, result, params = []) {
     if (Array.isArray(result) && result.length === 2 && result[1] instanceof ArrayBuffer) {
       const [value, data] = result;
-      send(['frida:rpc', id, type, undefined, value, ...params], data);
+      send(['{FRIDA_PREFIX}:rpc', id, type, undefined, value, ...params], data);
     } else if (result instanceof ArrayBuffer) {
-      send(['frida:rpc', id, type, undefined, ...params], result);
+      send(['{FRIDA_PREFIX}:rpc', id, type, undefined, ...params], result);
     } else {
-      send(['frida:rpc', id, type, result, ...params]);
+      send(['{FRIDA_PREFIX}:rpc', id, type, result, ...params]);
     }
   }
 
diff --git a/bindings/gumjs/runtime/worker.js b/bindings/gumjs/runtime/worker.js
index 1cb5914..9515552 100644
--- a/bindings/gumjs/runtime/worker.js
+++ b/bindings/gumjs/runtime/worker.js
@@ -28,7 +28,7 @@ class Worker {
 
     const {payload} = message;
 
-    if (Array.isArray(payload) && payload[0] === 'frida:rpc') {
+    if (Array.isArray(payload) && payload[0] === '{FRIDA_PREFIX}:rpc') {
       const [, id, operation, ...params] = payload;
       this._onRpcMessage(id, operation, params, data);
       return;
@@ -50,7 +50,7 @@ class Worker {
           reject(error);
       });
 
-      this.post(['frida:rpc', id, operation].concat(params));
+      this.post(['{FRIDA_PREFIX}:rpc', id, operation].concat(params));
     });
   }
 
diff --git a/gum/backend-posix/gummemory-posix.c b/gum/backend-posix/gummemory-posix.c
index 848b430..4780f1c 100644
--- a/gum/backend-posix/gummemory-posix.c
+++ b/gum/backend-posix/gummemory-posix.c
@@ -34,14 +34,12 @@ struct _GumEnumerateFreeRangesContext
   GumAddress prev_end;
 };
 
-static gpointer gum_memory_allocate_internal (gpointer address, gsize size,
-    gsize alignment, GumPageProtection prot, gint extra_flags);
 static gboolean gum_try_alloc_in_range_if_near_enough (
     const GumRangeDetails * details, gpointer user_data);
 static gboolean gum_try_suggest_allocation_base (const GumMemoryRange * range,
     const GumAllocNearContext * ctx, gpointer * allocation_base);
 static gpointer gum_allocate_page_aligned (gpointer address, gsize size,
-    gint prot, gint extra_flags);
+    gint prot);
 static void gum_enumerate_free_ranges (GumFoundRangeFunc func,
     gpointer user_data);
 static gboolean gum_emit_free_range (const GumRangeDetails * details,
@@ -123,16 +121,6 @@ gum_memory_allocate (gpointer address,
                      gsize size,
                      gsize alignment,
                      GumPageProtection prot)
-{
-  return gum_memory_allocate_internal (address, size, alignment, prot, 0);
-}
-
-static gpointer
-gum_memory_allocate_internal (gpointer address,
-                              gsize size,
-                              gsize alignment,
-                              GumPageProtection prot,
-                              gint extra_flags)
 {
   gsize page_size, allocation_size;
   guint8 * base, * aligned_base;
@@ -144,7 +132,7 @@ gum_memory_allocate_internal (gpointer address,
   allocation_size = GUM_ALIGN_SIZE (allocation_size, page_size);
 
   base = gum_allocate_page_aligned (address, allocation_size,
-      _gum_page_protection_to_posix (prot), extra_flags);
+      _gum_page_protection_to_posix (prot));
   if (base == NULL)
     return NULL;
 
@@ -209,16 +197,6 @@ gum_try_alloc_in_range_if_near_enough (const GumRangeDetails * details,
   if (!gum_try_suggest_allocation_base (details->range, ctx, &suggested_base))
     goto keep_looking;
 
-#ifdef HAVE_FREEBSD
-  received_base = gum_memory_allocate_internal (suggested_base, ctx->size,
-      ctx->alignment, ctx->prot, MAP_FIXED | MAP_EXCL);
-  if (received_base != NULL)
-  {
-    ctx->result = received_base;
-    return FALSE;
-  }
-#endif
-
   received_base = gum_memory_allocate (suggested_base, ctx->size,
       ctx->alignment, ctx->prot);
   if (received_base == NULL)
@@ -267,29 +245,27 @@ gum_try_suggest_allocation_base (const GumMemoryRange * range,
 static gpointer
 gum_allocate_page_aligned (gpointer address,
                            gsize size,
-                           gint prot,
-                           gint extra_flags)
+                           gint prot)
 {
   gpointer result;
-  const gint base_flags = MAP_PRIVATE | MAP_ANONYMOUS | extra_flags;
-  gint region_flags = 0;
+  int extra_flags = 0;
 
 #if defined (HAVE_FREEBSD) && GLIB_SIZEOF_VOID_P == 8
   if (address != NULL &&
       GPOINTER_TO_SIZE (address) + size < G_MAXUINT32)
   {
-    region_flags |= MAP_32BIT;
+    extra_flags |= MAP_32BIT;
   }
 #endif
 
-  result = mmap (address, size, prot, base_flags | region_flags, -1, 0);
+  result = mmap (address, size, prot, MAP_PRIVATE | MAP_ANONYMOUS | extra_flags, -1, 0);
 
 #if defined (HAVE_FREEBSD) && GLIB_SIZEOF_VOID_P == 8
-  if (result == MAP_FAILED && (region_flags & MAP_32BIT) != 0)
+  if (result == MAP_FAILED && (extra_flags & MAP_32BIT) != 0)
   {
-    result = mmap (NULL, size, prot, base_flags | region_flags, -1, 0);
+    result = mmap (NULL, size, prot, MAP_PRIVATE | MAP_ANONYMOUS | extra_flags, -1, 0);
     if (result == MAP_FAILED)
-      result = mmap (address, size, prot, base_flags, -1, 0);
+      result = mmap (address, size, prot, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
   }
 #endif
 
diff --git a/gum/gum.c b/gum/gum.c
index 239c70d..cd43aa7 100644
--- a/gum/gum.c
+++ b/gum/gum.c
@@ -306,7 +306,7 @@ gum_init_embedded (void)
   g_log_set_default_handler (gum_on_log_message, NULL);
   gum_do_init ();
 
-  g_set_prgname ("frida");
+  g_set_prgname ("{FRIDA_PREFIX}");
 
 #if defined (HAVE_LINUX) && defined (HAVE_GLIBC)
   gum_libdl_prevent_unload ();
-- 
2.47.0.windows.2

