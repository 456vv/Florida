diff --git a/bindings/gumjs/gumquickcore.c b/bindings/gumjs/gumquickcore.c
index 3b4bf60..419626a 100644
--- a/bindings/gumjs/gumquickcore.c
+++ b/bindings/gumjs/gumquickcore.c
@@ -24,8 +24,11 @@
 #endif
 #ifdef HAVE_JAVA_BRIDGE
 # include "gumquickscript-java.h"
 #endif
+#ifdef HAVE_IL2CPP_BRIDGE
+# include "gumquickscript-il2cpp.h"
+#endif
 
 #include <string.h>
 #ifdef _MSC_VER
 # include <intrin.h>
@@ -181,8 +184,9 @@ GUMJS_DECLARE_FUNCTION (gumjs_wait_for_event)
 GUMJS_DECLARE_GETTER (gumjs_frida_get_heap_size)
 GUMJS_DECLARE_FUNCTION (gumjs_frida_objc_load)
 GUMJS_DECLARE_FUNCTION (gumjs_frida_swift_load)
 GUMJS_DECLARE_FUNCTION (gumjs_frida_java_load)
+GUMJS_DECLARE_FUNCTION (gumjs_frida_il2cpp_load)
 
 GUMJS_DECLARE_FUNCTION (gumjs_script_evaluate)
 GUMJS_DECLARE_FUNCTION (gumjs_script_load)
 static gboolean gum_quick_core_init_module (GumQuickModuleInitOperation * op);
@@ -405,8 +409,9 @@ static const JSCFunctionListEntry gumjs_frida_entries[] =
   JS_CGETSET_DEF ("heapSize", gumjs_frida_get_heap_size, NULL),
   JS_CFUNC_DEF ("_loadObjC", 0, gumjs_frida_objc_load),
   JS_CFUNC_DEF ("_loadSwift", 0, gumjs_frida_swift_load),
   JS_CFUNC_DEF ("_loadJava", 0, gumjs_frida_java_load),
+  JS_CFUNC_DEF ("_loadIl2Cpp", 0, gumjs_frida_il2cpp_load),
 };
 
 static const JSCFunctionListEntry gumjs_script_entries[] =
 {
@@ -2111,8 +2116,20 @@ GUMJS_DEFINE_FUNCTION (gumjs_frida_java_load)
 
   return loaded;
 }
 
+GUMJS_DEFINE_FUNCTION (gumjs_frida_il2cpp_load)
+{
+  JSValue loaded = JS_FALSE;
+
+#ifdef HAVE_IL2CPP_BRIDGE
+  gum_quick_bundle_load (gumjs_il2cpp_modules, ctx);
+  loaded = JS_TRUE;
+#endif
+
+  return loaded;
+}
+
 GUMJS_DEFINE_FUNCTION (gumjs_script_evaluate)
 {
   const gchar * name, * source;
   JSValue func;
@@ -2293,8 +2310,14 @@ GUMJS_DEFINE_FUNCTION (gumjs_script_find_source_map)
     else if (strcmp (name, "/_java.js") == 0)
     {
       json = gumjs_java_source_map;
     }
+#endif
+#ifdef HAVE_IL2CPP_BRIDGE
+    else if (strcmp (name, "/_il2cppjs") == 0)
+    {
+      json = gumjs_il2cpp_source_map;
+    }
 #endif
   }
 
   if (json != NULL)
diff --git a/bindings/gumjs/generate-runtime.py b/bindings/gumjs/generate-runtime.py
index 0b58a0f..ea9698c 100644
--- a/bindings/gumjs/generate-runtime.py
+++ b/bindings/gumjs/generate-runtime.py
@@ -15,9 +15,10 @@ RELAXED_DEPS = {
 
 EXACT_DEPS = {
     "frida-java-bridge": "6.3.6",
     "frida-objc-bridge": "7.0.6",
-    "frida-swift-bridge": "2.0.8"
+    "frida-swift-bridge": "2.0.8",
+    "frida-il2cpp-bridge": "0.9.0"
 }
 
 
 def main(argv):
@@ -51,9 +52,9 @@ def generate_runtime(output_dir, priv_dir, input_dir, gum_dir, capstone_incdir,
         subprocess.run([npm, "install"] + [f"{name}@{version_spec}" for name, version_spec in RELAXED_DEPS.items()],
                        capture_output=True,
                        cwd=priv_dir,
                        check=True)
-        subprocess.run([npm, "install", "-E"] + [f"{name}@{version_spec}" for name, version_spec in EXACT_DEPS.items()],
+        subprocess.run([npm, "install", "-E"] + [f"{name}#{version_spec}" for name, version_spec in EXACT_DEPS.items()],
                        capture_output=True,
                        cwd=priv_dir,
                        check=True)
 
@@ -71,16 +72,18 @@ def generate_runtime(output_dir, priv_dir, input_dir, gum_dir, capstone_incdir,
         runtime = quick_tmp_dir / "frida.js"
         objc = quick_tmp_dir / "objc.js"
         swift = quick_tmp_dir / "swift.js"
         java = quick_tmp_dir / "java.js"
+        il2cpp = quick_tmp_dir / "il2cpp.js"
 
         quick_options = [
             "-c", # Compress for smaller code and better performance.
         ]
         call_compiler(runtime_reldir / "entrypoint-quickjs.js", "-o", runtime, *quick_options)
         call_compiler(runtime_reldir / "objc.js", "-o", objc, *quick_options)
         call_compiler(runtime_reldir / "swift.js", "-o", swift, *quick_options)
         call_compiler(runtime_reldir / "java.js", "-o", java, *quick_options)
+        call_compiler(runtime_reldir / "il2cpp.js", "-o", il2cpp, *quick_options)
 
         qcflags = []
         if endian != sys.byteorder:
             qcflags.append("--bswap")
@@ -88,28 +91,32 @@ def generate_runtime(output_dir, priv_dir, input_dir, gum_dir, capstone_incdir,
         generate_runtime_quick("runtime", output_dir, priv_dir, "gumquickscript-runtime.h", [runtime], quickcompile, qcflags)
         generate_runtime_quick("objc", output_dir, priv_dir, "gumquickscript-objc.h", [objc], quickcompile, qcflags)
         generate_runtime_quick("swift", output_dir, priv_dir, "gumquickscript-swift.h", [swift], quickcompile, qcflags)
         generate_runtime_quick("java", output_dir, priv_dir, "gumquickscript-java.h", [java], quickcompile, qcflags)
+        generate_runtime_quick("il2cpp", output_dir, priv_dir, "gumquickscript-il2cpp.h", [il2cpp], quickcompile, qcflags)
 
     if "v8" in backends:
         v8_tmp_dir = Path("out-v8")
         runtime = v8_tmp_dir / "frida.js"
         objc = v8_tmp_dir / "objc.js"
         swift = v8_tmp_dir / "swift.js"
         java = v8_tmp_dir / "java.js"
+        il2cpp = v8_tmp_dir / "il2cpp.js"
 
         v8_options = [
             "-c", # Compress for smaller code and better performance.
         ]
         call_compiler(runtime_reldir / "entrypoint-v8.js", "-o", runtime, *v8_options)
         call_compiler(runtime_reldir / "objc.js", "-o", objc, *v8_options)
         call_compiler(runtime_reldir / "swift.js", "-o", swift, *v8_options)
         call_compiler(runtime_reldir / "java.js", "-o", java, *v8_options)
+        call_compiler(runtime_reldir / "il2cpp.js", "-o", il2cpp, *v8_options)
 
         generate_runtime_v8("runtime", output_dir, priv_dir, "gumv8script-runtime.h", [runtime])
         generate_runtime_v8("objc", output_dir, priv_dir, "gumv8script-objc.h", [objc])
         generate_runtime_v8("swift", output_dir, priv_dir, "gumv8script-swift.h", [swift])
         generate_runtime_v8("java", output_dir, priv_dir, "gumv8script-java.h", [java])
+        generate_runtime_v8("il2cpp", output_dir, priv_dir, "gumv8script-il2cpp.h", [il2cpp])
 
     generate_runtime_cmodule(output_dir, "gumcmodule-runtime.h", input_dir, gum_dir, capstone_incdir, libtcc_incdir, arch)
 
     (output_dir / "runtime.bundle").write_bytes(b"")
diff --git a/bindings/gumjs/gumv8core.cpp b/bindings/gumjs/gumv8core.cpp
index ee7fe3e..86221fd 100644
--- a/bindings/gumjs/gumv8core.cpp
+++ b/bindings/gumjs/gumv8core.cpp
@@ -25,8 +25,11 @@
 #endif
 #ifdef HAVE_JAVA_BRIDGE
 # include "gumv8script-java.h"
 #endif
+#ifdef HAVE_IL2CPP_BRIDGE
+# include "gumv8script-il2cpp.h"
+#endif
 
 #include <ffi.h>
 #include <glib/gprintf.h>
 #ifdef _MSC_VER
@@ -210,8 +213,9 @@ static void gumjs_global_get (Local<Name> property,
 GUMJS_DECLARE_GETTER (gumjs_frida_get_heap_size)
 GUMJS_DECLARE_FUNCTION (gumjs_frida_objc_load)
 GUMJS_DECLARE_FUNCTION (gumjs_frida_swift_load)
 GUMJS_DECLARE_FUNCTION (gumjs_frida_java_load)
+GUMJS_DECLARE_FUNCTION (gumjs_frida_il2cpp_load)
 
 GUMJS_DECLARE_FUNCTION (gumjs_script_evaluate)
 GUMJS_DECLARE_FUNCTION (gumjs_script_load)
 GUMJS_DECLARE_FUNCTION (gumjs_script_register_source_map)
@@ -410,8 +414,9 @@ static const GumV8Function gumjs_frida_functions[] =
 {
   { "_loadObjC", gumjs_frida_objc_load },
   { "_loadSwift", gumjs_frida_swift_load },
   { "_loadJava", gumjs_frida_java_load },
+  { "_loadIl2Cpp", gumjs_frida_il2cpp_load },
 
   { NULL, NULL }
 };
 
@@ -1713,8 +1718,23 @@ GUMJS_DEFINE_FUNCTION (gumjs_frida_java_load)
 
   info.GetReturnValue ().Set (loaded);
 }
 
+GUMJS_DEFINE_FUNCTION (gumjs_frida_il2cpp_load)
+{
+  bool loaded = false;
+
+#ifdef HAVE_IL2CPP_BRIDGE
+  auto bundle = gum_v8_bundle_new (isolate, gumjs_il2cpp_modules);
+  gum_v8_bundle_run (bundle);
+  gum_v8_bundle_free (bundle);
+
+  loaded = true;
+#endif
+
+  info.GetReturnValue ().Set (loaded);
+}
+
 GUMJS_DEFINE_FUNCTION (gumjs_script_evaluate)
 {
   gchar * name, * source;
   if (!_gum_v8_args_parse (args, "ss", &name, &source))
@@ -1847,8 +1867,14 @@ GUMJS_DEFINE_FUNCTION (gumjs_script_find_source_map)
       else if (strcmp (name, "/_java.js") == 0)
       {
         json = gumjs_java_source_map;
       }
+#endif
+#ifdef HAVE_IL2CPP_BRIDGE
+      else if (strcmp (name, "/_il2cpp.js") == 0)
+      {
+        json = gumjs_il2cpp_source_map;
+      }
 #endif
     }
   }
 
diff --git a/bindings/gumjs/meson.build b/bindings/gumjs/meson.build
index d63a1f8..4df6cdf 100644
--- a/bindings/gumjs/meson.build
+++ b/bindings/gumjs/meson.build
@@ -269,8 +269,9 @@ gumjs_deps = [
 ]
 
 gumjs = library('frida-gumjs-' + api_version, gumjs_sources,
   c_args: frida_component_cflags,
+  cpp_args: ['-funsigned-char'],
   override_options: [
     'cpp_std=c++17',
     'cpp_eh=none',
     'cpp_rtti=false',
diff --git a/bindings/gumjs/runtime/core.js b/bindings/gumjs/runtime/core.js
index f1c1417..8358796 100644
--- a/bindings/gumjs/runtime/core.js
+++ b/bindings/gumjs/runtime/core.js
@@ -151,8 +151,10 @@ Object.defineProperties(engine, {
     }
   },
 });
 
+Frida._loadIl2Cpp()
+
 function makeStubBridge() {
   return Object.freeze({ available: false });
 }
 
diff --git a/gum/gum.c b/gum/gum.c
index 239c70d..0af99c9 100644
--- a/gum/gum.c
+++ b/gum/gum.c
@@ -305,9 +305,9 @@ gum_init_embedded (void)
 #endif
   g_log_set_default_handler (gum_on_log_message, NULL);
   gum_do_init ();
 
-  g_set_prgname ("frida");
+  g_set_prgname ("${FRIDA_PREFIX}");
 
 #if defined (HAVE_LINUX) && defined (HAVE_GLIBC)
   gum_libdl_prevent_unload ();
 #endif
diff --git a/meson.build b/meson.build
index a0907b6..f192c06 100644
--- a/meson.build
+++ b/meson.build
@@ -63,9 +63,11 @@ cc = meson.get_compiler('c')
 if cc.get_argument_syntax() == 'msvc' and host_arch == 'arm64'
   add_languages('masm')
 endif
 
-frida_component_cflags = []
+frida_component_cflags = [
+  '-funsigned-char'
+]
 ndebug = get_option('b_ndebug')
 optimize_for_prod = ndebug == 'true' or (ndebug == 'if-release' and not get_option('debug'))
 if optimize_for_prod
   frida_component_cflags += [
@@ -645,8 +647,12 @@ if have_gumjs
   if get_option('frida_java_bridge').allowed()
     cdata.set('HAVE_JAVA_BRIDGE', 1)
   endif
 
+  if get_option('frida_il2cpp_bridge').allowed()
+    cdata.set('HAVE_IL2CPP_BRIDGE', 1)
+  endif
+
   libsoup_dep = dependency('libsoup-3.0', default_options: [
     'gssapi=disabled',
     'ntlm=disabled',
     'brotli=disabled',
diff --git a/meson.options b/meson.options
index bd8db08..94d2c22 100644
--- a/meson.options
+++ b/meson.options
@@ -83,8 +83,14 @@ option('devkits',
   value: [],
   description: 'Devkits to build'
 )
 
+option('frida_il2cpp_bridge',
+  type: 'feature',
+  value: 'auto',
+  description: 'Build JavaScript bindings with Il2Cpp bridge included'
+)
+
 option('tests',
   type: 'feature',
   value: 'auto',
   description: 'Build tests'
