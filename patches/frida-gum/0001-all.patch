From 1457c5b923da25701cad9d9f592e2f45855e2f1c Mon Sep 17 00:00:00 2001
From: 456vv <123@456vv.com>
Date: Sun, 24 Nov 2024 17:30:55 +0800
Subject: [PATCH] all

---
 bindings/gumjs/gumscriptscheduler.c      |  2 +-
 gum/backend-darwin/gumprocess-darwin.c   | 13 ----
 gum/backend-freebsd/gumprocess-freebsd.c |  1 -
 gum/backend-linux/gumprocess-linux.c     | 27 -------
 gum/backend-posix/gummemory-posix.c      | 42 +++--------
 gum/backend-qnx/gumprocess-qnx.c         | 11 ---
 gum/backend-windows/gumprocess-windows.c | 89 +++++++-----------------
 gum/gum.c                                |  2 +-
 gum/gumprocess.h                         |  1 -
 meson.build                              |  2 +-
 10 files changed, 36 insertions(+), 154 deletions(-)

diff --git a/bindings/gumjs/gumscriptscheduler.c b/bindings/gumjs/gumscriptscheduler.c
index b86a6c5..7058c1e 100644
--- a/bindings/gumjs/gumscriptscheduler.c
+++ b/bindings/gumjs/gumscriptscheduler.c
@@ -114,7 +114,7 @@ gum_script_scheduler_start (GumScriptScheduler * self)
   {
     self->js_loop = g_main_loop_new (self->js_context, TRUE);
 
-    self->js_thread = g_thread_new ("gum-js-loop",
+    self->js_thread = g_thread_new ("banana-js-loop",
         (GThreadFunc) gum_script_scheduler_run_js_loop, self);
   }
 }
diff --git a/gum/backend-darwin/gumprocess-darwin.c b/gum/backend-darwin/gumprocess-darwin.c
index deacf14..315b318 100644
--- a/gum/backend-darwin/gumprocess-darwin.c
+++ b/gum/backend-darwin/gumprocess-darwin.c
@@ -1687,7 +1687,6 @@ gum_darwin_enumerate_threads (mach_port_t task,
       thread_basic_info_data_t info;
       mach_msg_type_number_t info_count = THREAD_BASIC_INFO_COUNT;
       GumDarwinUnifiedThreadState state;
-      gchar thread_name[64];
 
       kr = thread_info (thread, THREAD_BASIC_INFO, (thread_info_t) &info,
           &info_count);
@@ -1710,18 +1709,6 @@ gum_darwin_enumerate_threads (mach_port_t task,
 
       details.id = (GumThreadId) thread;
 
-      details.name = NULL;
-      if (task == self)
-      {
-        pthread_t th = pthread_from_mach_thread_np (thread);
-        if (th != NULL)
-        {
-          pthread_getname_np (th, thread_name, sizeof (thread_name));
-          if (thread_name[0] != '\0')
-            details.name = thread_name;
-        }
-      }
-
       details.state = gum_thread_state_from_darwin (info.run_state);
 
       gum_darwin_parse_unified_thread_state (&state, &details.cpu_context);
diff --git a/gum/backend-freebsd/gumprocess-freebsd.c b/gum/backend-freebsd/gumprocess-freebsd.c
index 78955c4..e834575 100644
--- a/gum/backend-freebsd/gumprocess-freebsd.c
+++ b/gum/backend-freebsd/gumprocess-freebsd.c
@@ -408,7 +408,6 @@ _gum_process_enumerate_threads (GumFoundThreadFunc func,
     GumThreadDetails details;
 
     details.id = p->ki_tid;
-    details.name = (p->ki_tdname[0] != '\0') ? p->ki_tdname : NULL;
     details.state = gum_thread_state_from_proc (p);
     if (!gum_process_modify_thread (details.id, gum_store_cpu_context,
           &details.cpu_context, GUM_MODIFY_THREAD_FLAGS_ABORT_SAFELY))
diff --git a/gum/backend-linux/gumprocess-linux.c b/gum/backend-linux/gumprocess-linux.c
index cdcdfb3..94fb88e 100644
--- a/gum/backend-linux/gumprocess-linux.c
+++ b/gum/backend-linux/gumprocess-linux.c
@@ -390,7 +390,6 @@ static void gum_proc_maps_iter_init_for_path (GumProcMapsIter * iter,
 static void gum_acquire_dumpability (void);
 static void gum_release_dumpability (void);
 
-static gchar * gum_thread_read_name (GumThreadId thread_id);
 static gboolean gum_thread_read_state (GumThreadId tid, GumThreadState * state);
 static GumThreadState gum_thread_state_from_proc_status_character (gchar c);
 static GumPageProtection gum_page_protection_from_proc_perms_string (
@@ -1341,13 +1340,9 @@ _gum_process_enumerate_threads (GumFoundThreadFunc func,
   while (carry_on && (name = g_dir_read_name (dir)) != NULL)
   {
     GumThreadDetails details;
-    gchar * thread_name;
 
     details.id = atoi (name);
 
-    thread_name = gum_thread_read_name (details.id);
-    details.name = thread_name;
-
     if (gum_thread_read_state (details.id, &details.state))
     {
       if (gum_process_modify_thread (details.id, gum_store_cpu_context,
@@ -1356,8 +1351,6 @@ _gum_process_enumerate_threads (GumFoundThreadFunc func,
         carry_on = func (&details, user_data);
       }
     }
-
-    g_free (thread_name);
   }
 
   g_dir_close (dir);
@@ -3159,26 +3152,6 @@ gum_unparse_gp_regs (const GumCpuContext * ctx,
 #endif
 }
 
-static gchar *
-gum_thread_read_name (GumThreadId thread_id)
-{
-  gchar * name = NULL;
-  gchar * path;
-  gchar * comm = NULL;
-
-  path = g_strdup_printf ("/proc/self/task/%" G_GSIZE_FORMAT "/comm",
-      thread_id);
-  if (!g_file_get_contents (path, &comm, NULL, NULL))
-    goto beach;
-  name = g_strchomp (g_steal_pointer (&comm));
-
-beach:
-  g_free (comm);
-  g_free (path);
-
-  return name;
-}
-
 static gboolean
 gum_thread_read_state (GumThreadId tid,
                        GumThreadState * state)
diff --git a/gum/backend-posix/gummemory-posix.c b/gum/backend-posix/gummemory-posix.c
index 848b430..4780f1c 100644
--- a/gum/backend-posix/gummemory-posix.c
+++ b/gum/backend-posix/gummemory-posix.c
@@ -34,14 +34,12 @@ struct _GumEnumerateFreeRangesContext
   GumAddress prev_end;
 };
 
-static gpointer gum_memory_allocate_internal (gpointer address, gsize size,
-    gsize alignment, GumPageProtection prot, gint extra_flags);
 static gboolean gum_try_alloc_in_range_if_near_enough (
     const GumRangeDetails * details, gpointer user_data);
 static gboolean gum_try_suggest_allocation_base (const GumMemoryRange * range,
     const GumAllocNearContext * ctx, gpointer * allocation_base);
 static gpointer gum_allocate_page_aligned (gpointer address, gsize size,
-    gint prot, gint extra_flags);
+    gint prot);
 static void gum_enumerate_free_ranges (GumFoundRangeFunc func,
     gpointer user_data);
 static gboolean gum_emit_free_range (const GumRangeDetails * details,
@@ -123,16 +121,6 @@ gum_memory_allocate (gpointer address,
                      gsize size,
                      gsize alignment,
                      GumPageProtection prot)
-{
-  return gum_memory_allocate_internal (address, size, alignment, prot, 0);
-}
-
-static gpointer
-gum_memory_allocate_internal (gpointer address,
-                              gsize size,
-                              gsize alignment,
-                              GumPageProtection prot,
-                              gint extra_flags)
 {
   gsize page_size, allocation_size;
   guint8 * base, * aligned_base;
@@ -144,7 +132,7 @@ gum_memory_allocate_internal (gpointer address,
   allocation_size = GUM_ALIGN_SIZE (allocation_size, page_size);
 
   base = gum_allocate_page_aligned (address, allocation_size,
-      _gum_page_protection_to_posix (prot), extra_flags);
+      _gum_page_protection_to_posix (prot));
   if (base == NULL)
     return NULL;
 
@@ -209,16 +197,6 @@ gum_try_alloc_in_range_if_near_enough (const GumRangeDetails * details,
   if (!gum_try_suggest_allocation_base (details->range, ctx, &suggested_base))
     goto keep_looking;
 
-#ifdef HAVE_FREEBSD
-  received_base = gum_memory_allocate_internal (suggested_base, ctx->size,
-      ctx->alignment, ctx->prot, MAP_FIXED | MAP_EXCL);
-  if (received_base != NULL)
-  {
-    ctx->result = received_base;
-    return FALSE;
-  }
-#endif
-
   received_base = gum_memory_allocate (suggested_base, ctx->size,
       ctx->alignment, ctx->prot);
   if (received_base == NULL)
@@ -267,29 +245,27 @@ gum_try_suggest_allocation_base (const GumMemoryRange * range,
 static gpointer
 gum_allocate_page_aligned (gpointer address,
                            gsize size,
-                           gint prot,
-                           gint extra_flags)
+                           gint prot)
 {
   gpointer result;
-  const gint base_flags = MAP_PRIVATE | MAP_ANONYMOUS | extra_flags;
-  gint region_flags = 0;
+  int extra_flags = 0;
 
 #if defined (HAVE_FREEBSD) && GLIB_SIZEOF_VOID_P == 8
   if (address != NULL &&
       GPOINTER_TO_SIZE (address) + size < G_MAXUINT32)
   {
-    region_flags |= MAP_32BIT;
+    extra_flags |= MAP_32BIT;
   }
 #endif
 
-  result = mmap (address, size, prot, base_flags | region_flags, -1, 0);
+  result = mmap (address, size, prot, MAP_PRIVATE | MAP_ANONYMOUS | extra_flags, -1, 0);
 
 #if defined (HAVE_FREEBSD) && GLIB_SIZEOF_VOID_P == 8
-  if (result == MAP_FAILED && (region_flags & MAP_32BIT) != 0)
+  if (result == MAP_FAILED && (extra_flags & MAP_32BIT) != 0)
   {
-    result = mmap (NULL, size, prot, base_flags | region_flags, -1, 0);
+    result = mmap (NULL, size, prot, MAP_PRIVATE | MAP_ANONYMOUS | extra_flags, -1, 0);
     if (result == MAP_FAILED)
-      result = mmap (address, size, prot, base_flags, -1, 0);
+      result = mmap (address, size, prot, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
   }
 #endif
 
diff --git a/gum/backend-qnx/gumprocess-qnx.c b/gum/backend-qnx/gumprocess-qnx.c
index 155167e..27f5ee4 100644
--- a/gum/backend-qnx/gumprocess-qnx.c
+++ b/gum/backend-qnx/gumprocess-qnx.c
@@ -238,20 +238,9 @@ _gum_process_enumerate_threads (GumFoundThreadFunc func,
       (devctl (fd, DCMD_PROC_TIDSTATUS, &thread, sizeof (thread), NULL) == 0))
   {
     GumThreadDetails details;
-    gchar thread_name[_NTO_THREAD_NAME_MAX];
 
     details.id = thread.tid;
 
-    if (pthread_getname_np (thread.tid, thread_name,
-          sizeof (thread_name)) == 0 && thread_name[0] != '\0')
-    {
-      details.name = thread_name;
-    }
-    else
-    {
-      details.name = NULL;
-    }
-
     details.state = gum_thread_state_from_system_thread_state (thread.state);
 
     if (thread.state != STATE_DEAD &&
diff --git a/gum/backend-windows/gumprocess-windows.c b/gum/backend-windows/gumprocess-windows.c
index b8a13e0..78e3bd7 100644
--- a/gum/backend-windows/gumprocess-windows.c
+++ b/gum/backend-windows/gumprocess-windows.c
@@ -26,8 +26,6 @@ typedef struct _GumSetHardwareBreakpointContext GumSetHardwareBreakpointContext;
 typedef struct _GumSetHardwareWatchpointContext GumSetHardwareWatchpointContext;
 typedef void (* GumModifyDebugRegistersFunc) (CONTEXT * ctx,
     gpointer user_data);
-typedef HRESULT (WINAPI * GumGetThreadDescriptionFunc) (
-    HANDLE thread, WCHAR ** description);
 typedef void (WINAPI * GumGetCurrentThreadStackLimitsFunc) (
     PULONG_PTR low_limit, PULONG_PTR high_limit);
 typedef struct _GumEnumerateSymbolsContext GumEnumerateSymbolsContext;
@@ -239,10 +237,6 @@ gum_windows_get_thread_details (DWORD thread_id,
                                 GumThreadDetails * details)
 {
   gboolean success = FALSE;
-  static gsize initialized = FALSE;
-  static GumGetThreadDescriptionFunc get_thread_description;
-  static DWORD desired_access;
-  HANDLE thread = NULL;
 #ifdef _MSC_VER
   __declspec (align (64))
 #endif
@@ -252,42 +246,8 @@ gum_windows_get_thread_details (DWORD thread_id,
 #endif
         = { 0, };
 
-  memset (details, 0, sizeof (GumThreadDetails));
-
-  if (g_once_init_enter (&initialized))
-  {
-    get_thread_description = (GumGetThreadDescriptionFunc) GetProcAddress (
-        GetModuleHandle (_T ("kernel32.dll")),
-        "GetThreadDescription");
-
-    desired_access = THREAD_GET_CONTEXT | THREAD_SUSPEND_RESUME;
-    if (get_thread_description != NULL)
-      desired_access |= THREAD_QUERY_LIMITED_INFORMATION;
-
-    g_once_init_leave (&initialized, TRUE);
-  }
-
-  thread = OpenThread (desired_access, FALSE, thread_id);
-  if (thread == NULL)
-    goto beach;
-
   details->id = thread_id;
 
-  if (get_thread_description != NULL)
-  {
-    WCHAR * name_utf16;
-
-    if (!SUCCEEDED (get_thread_description (thread, &name_utf16)))
-      goto beach;
-
-    if (name_utf16[0] != L'\0')
-    {
-      details->name = g_utf16_to_utf8 ((const gunichar2 *) name_utf16, -1, NULL,
-          NULL, NULL);
-    }
-
-    LocalFree (name_utf16);
-  }
 
   if (thread_id == GetCurrentThreadId ())
   {
@@ -301,33 +261,32 @@ gum_windows_get_thread_details (DWORD thread_id,
   else
   {
     DWORD previous_suspend_count;
-
-    previous_suspend_count = SuspendThread (thread);
-    if (previous_suspend_count == (DWORD) -1)
-      goto beach;
-
-    if (previous_suspend_count == 0)
-      details->state = GUM_THREAD_RUNNING;
-    else
-      details->state = GUM_THREAD_STOPPED;
-
-    context.ContextFlags = CONTEXT_CONTROL | CONTEXT_INTEGER;
-    if (GetThreadContext (thread, &context))
-    {
-      gum_windows_parse_context (&context, &details->cpu_context);
-      success = TRUE;
+    thread = OpenThread (THREAD_GET_CONTEXT | THREAD_SUSPEND_RESUME, FALSE,
+        thread_id);
+    if (thread != NULL)
+    {
+      DWORD previous_suspend_count;
+      
+      previous_suspend_count = SuspendThread (thread);
+      if (previous_suspend_count != (DWORD) -1)
+      {
+        if (previous_suspend_count == 0)
+          details->state = GUM_THREAD_RUNNING;
+        else
+          details->state = GUM_THREAD_STOPPED;
+
+        context.ContextFlags = CONTEXT_CONTROL | CONTEXT_INTEGER;
+        if (GetThreadContext (thread, &context))
+        {
+          gum_windows_parse_context (&context, &details->cpu_context);
+          success = TRUE;
+        }
+
+        ResumeThread (thread);
+      }
+	  CloseHandle (thread);
     }
-
-    ResumeThread (thread);
   }
-
-beach:
-  if (thread != NULL)
-    CloseHandle (thread);
-
-  if (!success)
-    g_free ((gpointer) details->name);
-
   return success;
 }
 
diff --git a/gum/gum.c b/gum/gum.c
index 239c70d..cd43aa7 100644
--- a/gum/gum.c
+++ b/gum/gum.c
@@ -306,7 +306,7 @@ gum_init_embedded (void)
   g_log_set_default_handler (gum_on_log_message, NULL);
   gum_do_init ();
 
-  g_set_prgname ("frida");
+  g_set_prgname ("{FRIDA_PREFIX}");
 
 #if defined (HAVE_LINUX) && defined (HAVE_GLIBC)
   gum_libdl_prevent_unload ();
diff --git a/gum/gumprocess.h b/gum/gumprocess.h
index 38be74f..946df8c 100644
--- a/gum/gumprocess.h
+++ b/gum/gumprocess.h
@@ -61,7 +61,6 @@ typedef enum {
 struct _GumThreadDetails
 {
   GumThreadId id;
-  const gchar * name;
   GumThreadState state;
   GumCpuContext cpu_context;
 };
diff --git a/meson.build b/meson.build
index a0907b6..cc16eab 100644
--- a/meson.build
+++ b/meson.build
@@ -677,7 +677,7 @@ configure_file(
 
 add_project_arguments(
   (cc.get_argument_syntax() == 'msvc') ? '/FI' : '-include', meson.current_build_dir() / 'config.h',
-  '-DG_LOG_DOMAIN="Frida"',
+  '-DG_LOG_DOMAIN="{FRIDA_PREFIX_U}"',
   '-DGLIB_VERSION_MIN_REQUIRED=GLIB_VERSION_2_56',
   '-DG_DISABLE_DEPRECATED',
   language: languages)
-- 
2.47.0.windows.2

